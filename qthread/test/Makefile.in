# Makefile.in generated by automake 1.11.3 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# -*- Makefile -*-
#
# Copyright (c)      2008  Sandia Corporation
#

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@ENABLE_CXX_TESTS_TRUE@am__append_1 = \
@ENABLE_CXX_TESTS_TRUE@			   test_cxx_1 \
@ENABLE_CXX_TESTS_TRUE@			   test_cxx_2

@ENABLE_CXX_TESTS_TRUE@am__append_2 = test_cxx_oldapi
TESTS = $(am__EXEEXT_4) $(am__EXEEXT_6) $(am__EXEEXT_7) \
	$(am__EXEEXT_8)
EXTRA_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) test_signal$(EXEEXT)
@COMPILE_ROSE_EXTENSIONS_TRUE@am__append_3 = test_log_barrier
@WANT_MULTINODE_TRUE@am__append_4 = test_multinode_init
check_PROGRAMS = $(am__EXEEXT_9)
subdir = test
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/ax_c_restrict.m4 \
	$(top_srcdir)/config/ax_check_16aligned_malloc.m4 \
	$(top_srcdir)/config/ax_check_page_aligned_malloc.m4 \
	$(top_srcdir)/config/ax_create_stdint_h.m4 \
	$(top_srcdir)/config/ax_openmp.m4 \
	$(top_srcdir)/config/libtool.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/ompi_check_package.m4 \
	$(top_srcdir)/config/qthread_builtin_expect.m4 \
	$(top_srcdir)/config/qthread_builtin_trap.m4 \
	$(top_srcdir)/config/qthread_check_FUNCTION.m4 \
	$(top_srcdir)/config/qthread_check_altix_timer.m4 \
	$(top_srcdir)/config/qthread_check_assembly.m4 \
	$(top_srcdir)/config/qthread_check_atomics.m4 \
	$(top_srcdir)/config/qthread_check_attributes.m4 \
	$(top_srcdir)/config/qthread_check_bitfield_order.m4 \
	$(top_srcdir)/config/qthread_check_hwloc.m4 \
	$(top_srcdir)/config/qthread_check_liblgrp.m4 \
	$(top_srcdir)/config/qthread_check_libnuma.m4 \
	$(top_srcdir)/config/qthread_check_machtopo.m4 \
	$(top_srcdir)/config/qthread_check_makecontext.m4 \
	$(top_srcdir)/config/qthread_check_plpa.m4 \
	$(top_srcdir)/config/qthread_check_portals4.m4 \
	$(top_srcdir)/config/qthread_check_pthreads.m4 \
	$(top_srcdir)/config/qthread_check_qsort.m4 \
	$(top_srcdir)/config/qthread_check_sst.m4 \
	$(top_srcdir)/config/qthread_check_swapcontext.m4 \
	$(top_srcdir)/config/qthread_check_syscalltypes.m4 \
	$(top_srcdir)/config/qthread_check_tiletopo.m4 \
	$(top_srcdir)/config/qthread_check_ucstack_ssflags.m4 \
	$(top_srcdir)/config/qthread_check_working_valloc.m4 \
	$(top_srcdir)/config/qthread_cond_define.m4 \
	$(top_srcdir)/config/qthread_detect_compiler_type.m4 \
	$(top_srcdir)/config/qthread_vamacros.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/qthread/common.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = test_wavefront$(EXEEXT)
am__EXEEXT_2 =
@ENABLE_CXX_TESTS_TRUE@am__EXEEXT_3 = test_cxx_1$(EXEEXT) \
@ENABLE_CXX_TESTS_TRUE@	test_cxx_2$(EXEEXT)
am__EXEEXT_4 = test_basic$(EXEEXT) test_basic_syncvar$(EXEEXT) \
	test_reinit$(EXEEXT) test_cas$(EXEEXT) test_cacheline$(EXEEXT) \
	test_id$(EXEEXT) test_incr$(EXEEXT) test_fincr$(EXEEXT) \
	test_dincr$(EXEEXT) test_stackleft$(EXEEXT) \
	test_migrate$(EXEEXT) test_disabled$(EXEEXT) \
	test_qtimer$(EXEEXT) test_syncvar$(EXEEXT) \
	test_syncvar2$(EXEEXT) test_precond$(EXEEXT) \
	test_qalloc$(EXEEXT) test_user_defined_block$(EXEEXT) \
	test_sinc$(EXEEXT) test_sinc_null$(EXEEXT) \
	test_tasklocal$(EXEEXT) test_tasklocal_no_default$(EXEEXT) \
	test_tasklocal_no_argcopy$(EXEEXT) test_external_fork$(EXEEXT) \
	test_external_syncvar$(EXEEXT) test_read$(EXEEXT) \
	test_teams$(EXEEXT) $(am__EXEEXT_3)
@ENABLE_CXX_TESTS_TRUE@am__EXEEXT_5 = test_cxx_oldapi$(EXEEXT)
am__EXEEXT_6 = test_qt_loop$(EXEEXT) test_qt_loop_sinc$(EXEEXT) \
	test_qt_loop_balance$(EXEEXT) \
	test_qt_loop_balance_sinc$(EXEEXT) test_qutil$(EXEEXT) \
	test_qutil_qsort$(EXEEXT) test_feb_barrier$(EXEEXT) \
	test_precond_fib$(EXEEXT) test_qloop_utils$(EXEEXT) \
	test_queue_loop$(EXEEXT) test_qpool$(EXEEXT) \
	test_qarray$(EXEEXT) test_qarray_accum$(EXEEXT) \
	test_qlfqueue$(EXEEXT) test_qdqueue$(EXEEXT) \
	test_allpairs$(EXEEXT) $(am__EXEEXT_5)
@COMPILE_ROSE_EXTENSIONS_TRUE@am__EXEEXT_7 =  \
@COMPILE_ROSE_EXTENSIONS_TRUE@	test_log_barrier$(EXEEXT)
@WANT_MULTINODE_TRUE@am__EXEEXT_8 = test_multinode_init$(EXEEXT)
am__EXEEXT_9 = $(am__EXEEXT_4) $(am__EXEEXT_6) $(am__EXEEXT_7) \
	$(am__EXEEXT_8)
am_test_allpairs_OBJECTS = test_allpairs.$(OBJEXT)
test_allpairs_OBJECTS = $(am_test_allpairs_OBJECTS)
test_allpairs_LDADD = $(LDADD)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am_test_basic_OBJECTS = test_basic.$(OBJEXT)
test_basic_OBJECTS = $(am_test_basic_OBJECTS)
test_basic_LDADD = $(LDADD)
test_basic_syncvar_SOURCES = test_basic_syncvar.c
test_basic_syncvar_OBJECTS = test_basic_syncvar.$(OBJEXT)
test_basic_syncvar_LDADD = $(LDADD)
test_basic_syncvar_DEPENDENCIES = $(qthreadlib)
am_test_cacheline_OBJECTS = test_cacheline.$(OBJEXT)
test_cacheline_OBJECTS = $(am_test_cacheline_OBJECTS)
test_cacheline_LDADD = $(LDADD)
am_test_cas_OBJECTS = test_cas.$(OBJEXT)
test_cas_OBJECTS = $(am_test_cas_OBJECTS)
test_cas_LDADD = $(LDADD)
am_test_cxx_1_OBJECTS = test_cxx_1.$(OBJEXT)
test_cxx_1_OBJECTS = $(am_test_cxx_1_OBJECTS)
test_cxx_1_LDADD = $(LDADD)
am_test_cxx_2_OBJECTS = test_cxx_2.$(OBJEXT)
test_cxx_2_OBJECTS = $(am_test_cxx_2_OBJECTS)
test_cxx_2_LDADD = $(LDADD)
am_test_cxx_oldapi_OBJECTS = test_cxx_oldapi.$(OBJEXT)
test_cxx_oldapi_OBJECTS = $(am_test_cxx_oldapi_OBJECTS)
test_cxx_oldapi_LDADD = $(LDADD)
am_test_dincr_OBJECTS = test_dincr.$(OBJEXT)
test_dincr_OBJECTS = $(am_test_dincr_OBJECTS)
test_dincr_LDADD = $(LDADD)
am_test_disabled_OBJECTS = test_disabled.$(OBJEXT)
test_disabled_OBJECTS = $(am_test_disabled_OBJECTS)
test_disabled_LDADD = $(LDADD)
am_test_external_fork_OBJECTS = test_external_fork.$(OBJEXT)
test_external_fork_OBJECTS = $(am_test_external_fork_OBJECTS)
test_external_fork_LDADD = $(LDADD)
am_test_external_syncvar_OBJECTS = test_external_syncvar.$(OBJEXT)
test_external_syncvar_OBJECTS = $(am_test_external_syncvar_OBJECTS)
test_external_syncvar_LDADD = $(LDADD)
am_test_feb_barrier_OBJECTS = test_feb_barrier.$(OBJEXT)
test_feb_barrier_OBJECTS = $(am_test_feb_barrier_OBJECTS)
test_feb_barrier_LDADD = $(LDADD)
am_test_fincr_OBJECTS = test_fincr.$(OBJEXT)
test_fincr_OBJECTS = $(am_test_fincr_OBJECTS)
test_fincr_LDADD = $(LDADD)
am_test_id_OBJECTS = test_id.$(OBJEXT)
test_id_OBJECTS = $(am_test_id_OBJECTS)
test_id_LDADD = $(LDADD)
am_test_incr_OBJECTS = test_incr.$(OBJEXT)
test_incr_OBJECTS = $(am_test_incr_OBJECTS)
test_incr_LDADD = $(LDADD)
am_test_log_barrier_OBJECTS = test_log_barrier.$(OBJEXT)
test_log_barrier_OBJECTS = $(am_test_log_barrier_OBJECTS)
test_log_barrier_LDADD = $(LDADD)
am_test_migrate_OBJECTS = test_migrate.$(OBJEXT)
test_migrate_OBJECTS = $(am_test_migrate_OBJECTS)
test_migrate_LDADD = $(LDADD)
am_test_multinode_init_OBJECTS = test_multinode_init.$(OBJEXT)
test_multinode_init_OBJECTS = $(am_test_multinode_init_OBJECTS)
test_multinode_init_LDADD = $(LDADD)
am_test_precond_OBJECTS = test_precond.$(OBJEXT)
test_precond_OBJECTS = $(am_test_precond_OBJECTS)
test_precond_LDADD = $(LDADD)
am_test_precond_fib_OBJECTS = test_precond_fib.$(OBJEXT)
test_precond_fib_OBJECTS = $(am_test_precond_fib_OBJECTS)
test_precond_fib_LDADD = $(LDADD)
am_test_qalloc_OBJECTS = test_qalloc.$(OBJEXT)
test_qalloc_OBJECTS = $(am_test_qalloc_OBJECTS)
test_qalloc_LDADD = $(LDADD)
am_test_qarray_OBJECTS = test_qarray.$(OBJEXT)
test_qarray_OBJECTS = $(am_test_qarray_OBJECTS)
test_qarray_LDADD = $(LDADD)
am_test_qarray_accum_OBJECTS = test_qarray_accum.$(OBJEXT)
test_qarray_accum_OBJECTS = $(am_test_qarray_accum_OBJECTS)
test_qarray_accum_LDADD = $(LDADD)
am_test_qdqueue_OBJECTS = test_qdqueue.$(OBJEXT)
test_qdqueue_OBJECTS = $(am_test_qdqueue_OBJECTS)
test_qdqueue_LDADD = $(LDADD)
am_test_qlfqueue_OBJECTS = test_qlfqueue.$(OBJEXT)
test_qlfqueue_OBJECTS = $(am_test_qlfqueue_OBJECTS)
test_qlfqueue_LDADD = $(LDADD)
am_test_qloop_utils_OBJECTS = test_qloop_utils.$(OBJEXT)
test_qloop_utils_OBJECTS = $(am_test_qloop_utils_OBJECTS)
test_qloop_utils_LDADD = $(LDADD)
am_test_qpool_OBJECTS = test_qpool.$(OBJEXT)
test_qpool_OBJECTS = $(am_test_qpool_OBJECTS)
test_qpool_LDADD = $(LDADD)
am_test_qt_loop_OBJECTS = test_qt_loop.$(OBJEXT)
test_qt_loop_OBJECTS = $(am_test_qt_loop_OBJECTS)
test_qt_loop_LDADD = $(LDADD)
am_test_qt_loop_balance_OBJECTS = test_qt_loop_balance.$(OBJEXT)
test_qt_loop_balance_OBJECTS = $(am_test_qt_loop_balance_OBJECTS)
test_qt_loop_balance_LDADD = $(LDADD)
am_test_qt_loop_balance_sinc_OBJECTS =  \
	test_qt_loop_balance_sinc.$(OBJEXT)
test_qt_loop_balance_sinc_OBJECTS =  \
	$(am_test_qt_loop_balance_sinc_OBJECTS)
test_qt_loop_balance_sinc_LDADD = $(LDADD)
am_test_qt_loop_sinc_OBJECTS = test_qt_loop_sinc.$(OBJEXT)
test_qt_loop_sinc_OBJECTS = $(am_test_qt_loop_sinc_OBJECTS)
test_qt_loop_sinc_LDADD = $(LDADD)
test_qtimer_SOURCES = test_qtimer.c
test_qtimer_OBJECTS = test_qtimer.$(OBJEXT)
test_qtimer_LDADD = $(LDADD)
test_qtimer_DEPENDENCIES = $(qthreadlib)
am_test_queue_loop_OBJECTS = test_queue_loop.$(OBJEXT)
test_queue_loop_OBJECTS = $(am_test_queue_loop_OBJECTS)
test_queue_loop_LDADD = $(LDADD)
am_test_qutil_OBJECTS = test_qutil.$(OBJEXT)
test_qutil_OBJECTS = $(am_test_qutil_OBJECTS)
test_qutil_LDADD = $(LDADD)
am_test_qutil_qsort_OBJECTS = test_qutil_qsort.$(OBJEXT)
test_qutil_qsort_OBJECTS = $(am_test_qutil_qsort_OBJECTS)
test_qutil_qsort_LDADD = $(LDADD)
am_test_read_OBJECTS = test_read.$(OBJEXT)
test_read_OBJECTS = $(am_test_read_OBJECTS)
test_read_LDADD = $(LDADD)
am_test_reinit_OBJECTS = test_reinit.$(OBJEXT)
test_reinit_OBJECTS = $(am_test_reinit_OBJECTS)
test_reinit_LDADD = $(LDADD)
am_test_signal_OBJECTS = test_signal.$(OBJEXT)
test_signal_OBJECTS = $(am_test_signal_OBJECTS)
test_signal_LDADD = $(LDADD)
am_test_sinc_OBJECTS = test_sinc.$(OBJEXT)
test_sinc_OBJECTS = $(am_test_sinc_OBJECTS)
test_sinc_LDADD = $(LDADD)
am_test_sinc_null_OBJECTS = test_sinc_null.$(OBJEXT)
test_sinc_null_OBJECTS = $(am_test_sinc_null_OBJECTS)
test_sinc_null_LDADD = $(LDADD)
am_test_stackleft_OBJECTS = test_stackleft.$(OBJEXT)
test_stackleft_OBJECTS = $(am_test_stackleft_OBJECTS)
test_stackleft_LDADD = $(LDADD)
test_syncvar_SOURCES = test_syncvar.c
test_syncvar_OBJECTS = test_syncvar.$(OBJEXT)
test_syncvar_LDADD = $(LDADD)
test_syncvar_DEPENDENCIES = $(qthreadlib)
test_syncvar2_SOURCES = test_syncvar2.c
test_syncvar2_OBJECTS = test_syncvar2.$(OBJEXT)
test_syncvar2_LDADD = $(LDADD)
test_syncvar2_DEPENDENCIES = $(qthreadlib)
am_test_tasklocal_OBJECTS = test_tasklocal.$(OBJEXT)
test_tasklocal_OBJECTS = $(am_test_tasklocal_OBJECTS)
test_tasklocal_LDADD = $(LDADD)
am_test_tasklocal_no_argcopy_OBJECTS =  \
	test_tasklocal_no_argcopy.$(OBJEXT)
test_tasklocal_no_argcopy_OBJECTS =  \
	$(am_test_tasklocal_no_argcopy_OBJECTS)
test_tasklocal_no_argcopy_LDADD = $(LDADD)
am_test_tasklocal_no_default_OBJECTS =  \
	test_tasklocal_no_default.$(OBJEXT)
test_tasklocal_no_default_OBJECTS =  \
	$(am_test_tasklocal_no_default_OBJECTS)
test_tasklocal_no_default_LDADD = $(LDADD)
am_test_teams_OBJECTS = test_teams.$(OBJEXT)
test_teams_OBJECTS = $(am_test_teams_OBJECTS)
test_teams_LDADD = $(LDADD)
test_user_defined_block_SOURCES = test_user_defined_block.c
test_user_defined_block_OBJECTS = test_user_defined_block.$(OBJEXT)
test_user_defined_block_LDADD = $(LDADD)
test_user_defined_block_DEPENDENCIES = $(qthreadlib)
am_test_wavefront_OBJECTS = test_wavefront.$(OBJEXT)
test_wavefront_OBJECTS = $(am_test_wavefront_OBJECTS)
test_wavefront_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)/include -I$(top_builddir)/include/qthread
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC    " $@;
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD  " $@;
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX   " $@;
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD " $@;
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN   " $@;
SOURCES = $(test_allpairs_SOURCES) $(test_basic_SOURCES) \
	test_basic_syncvar.c $(test_cacheline_SOURCES) \
	$(test_cas_SOURCES) $(test_cxx_1_SOURCES) \
	$(test_cxx_2_SOURCES) $(test_cxx_oldapi_SOURCES) \
	$(test_dincr_SOURCES) $(test_disabled_SOURCES) \
	$(test_external_fork_SOURCES) $(test_external_syncvar_SOURCES) \
	$(test_feb_barrier_SOURCES) $(test_fincr_SOURCES) \
	$(test_id_SOURCES) $(test_incr_SOURCES) \
	$(test_log_barrier_SOURCES) $(test_migrate_SOURCES) \
	$(test_multinode_init_SOURCES) $(test_precond_SOURCES) \
	$(test_precond_fib_SOURCES) $(test_qalloc_SOURCES) \
	$(test_qarray_SOURCES) $(test_qarray_accum_SOURCES) \
	$(test_qdqueue_SOURCES) $(test_qlfqueue_SOURCES) \
	$(test_qloop_utils_SOURCES) $(test_qpool_SOURCES) \
	$(test_qt_loop_SOURCES) $(test_qt_loop_balance_SOURCES) \
	$(test_qt_loop_balance_sinc_SOURCES) \
	$(test_qt_loop_sinc_SOURCES) test_qtimer.c \
	$(test_queue_loop_SOURCES) $(test_qutil_SOURCES) \
	$(test_qutil_qsort_SOURCES) $(test_read_SOURCES) \
	$(test_reinit_SOURCES) $(test_signal_SOURCES) \
	$(test_sinc_SOURCES) $(test_sinc_null_SOURCES) \
	$(test_stackleft_SOURCES) test_syncvar.c test_syncvar2.c \
	$(test_tasklocal_SOURCES) $(test_tasklocal_no_argcopy_SOURCES) \
	$(test_tasklocal_no_default_SOURCES) $(test_teams_SOURCES) \
	test_user_defined_block.c $(test_wavefront_SOURCES)
DIST_SOURCES = $(test_allpairs_SOURCES) $(test_basic_SOURCES) \
	test_basic_syncvar.c $(test_cacheline_SOURCES) \
	$(test_cas_SOURCES) $(test_cxx_1_SOURCES) \
	$(test_cxx_2_SOURCES) $(test_cxx_oldapi_SOURCES) \
	$(test_dincr_SOURCES) $(test_disabled_SOURCES) \
	$(test_external_fork_SOURCES) $(test_external_syncvar_SOURCES) \
	$(test_feb_barrier_SOURCES) $(test_fincr_SOURCES) \
	$(test_id_SOURCES) $(test_incr_SOURCES) \
	$(test_log_barrier_SOURCES) $(test_migrate_SOURCES) \
	$(test_multinode_init_SOURCES) $(test_precond_SOURCES) \
	$(test_precond_fib_SOURCES) $(test_qalloc_SOURCES) \
	$(test_qarray_SOURCES) $(test_qarray_accum_SOURCES) \
	$(test_qdqueue_SOURCES) $(test_qlfqueue_SOURCES) \
	$(test_qloop_utils_SOURCES) $(test_qpool_SOURCES) \
	$(test_qt_loop_SOURCES) $(test_qt_loop_balance_SOURCES) \
	$(test_qt_loop_balance_sinc_SOURCES) \
	$(test_qt_loop_sinc_SOURCES) test_qtimer.c \
	$(test_queue_loop_SOURCES) $(test_qutil_SOURCES) \
	$(test_qutil_qsort_SOURCES) $(test_read_SOURCES) \
	$(test_reinit_SOURCES) $(test_signal_SOURCES) \
	$(test_sinc_SOURCES) $(test_sinc_null_SOURCES) \
	$(test_stackleft_SOURCES) test_syncvar.c test_syncvar2.c \
	$(test_tasklocal_SOURCES) $(test_tasklocal_no_argcopy_SOURCES) \
	$(test_tasklocal_no_default_SOURCES) $(test_teams_SOURCES) \
	test_user_defined_block.c $(test_wavefront_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
HEADERS = $(noinst_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir
ETAGS = etags
CTAGS = ctags
# If stdout is a non-dumb tty, use colors.  If test -t is not supported,
# then this fails; a conservative approach.  Of course do not redirect
# stdout here, just stderr.
am__tty_colors = \
red=; grn=; lgn=; blu=; std=; \
test "X$(AM_COLOR_TESTS)" != Xno \
&& test "X$$TERM" != Xdumb \
&& { test "X$(AM_COLOR_TESTS)" = Xalways || test -t 1 2>/dev/null; } \
&& { \
  red='[0;31m'; \
  grn='[0;32m'; \
  lgn='[1;32m'; \
  blu='[1;34m'; \
  std='[m'; \
}
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCAS = @CCAS@
CCASDEPMODE = @CCASDEPMODE@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CHPL_HOME = @CHPL_HOME@
CLEANFILES = @CLEANFILES@ $(unbuildable) $(benchmarks)
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
EXTRA_DISTCHECK_OPTIONS = @EXTRA_DISTCHECK_OPTIONS@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENMP_CFLAGS = @OPENMP_CFLAGS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
RESTRICT_CXXFLAGS = @RESTRICT_CXXFLAGS@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SST_CFLAGS = @SST_CFLAGS@
SST_INCLUDE = @SST_INCLUDE@
SST_LIBS = @SST_LIBS@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
qthread_topo = @qthread_topo@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
timelimit_path = @timelimit_path@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
with_scheduler = @with_scheduler@
with_sinc = @with_sinc@
AM_CXXFLAGS = @RESTRICT_CXXFLAGS@
basic_tests = test_basic test_basic_syncvar test_reinit test_cas \
	test_cacheline test_id test_incr test_fincr test_dincr \
	test_stackleft test_migrate test_disabled test_qtimer \
	test_syncvar test_syncvar2 test_precond test_qalloc \
	test_user_defined_block test_sinc test_sinc_null \
	test_tasklocal test_tasklocal_no_default \
	test_tasklocal_no_argcopy test_external_fork \
	test_external_syncvar test_read test_teams $(am__append_1)
complex_tests = test_qt_loop test_qt_loop_sinc test_qt_loop_balance \
	test_qt_loop_balance_sinc test_qutil test_qutil_qsort \
	test_feb_barrier test_precond_fib test_qloop_utils \
	test_queue_loop test_qpool test_qarray test_qarray_accum \
	test_qlfqueue test_qdqueue test_allpairs $(am__append_2)
SUBDIRS = 
DIST_SUBDIRS = benchmarks
unbuildable = test_wavefront
benchmarks = 
@HAVE_PROG_TIMELIMIT_TRUE@TESTS_ENVIRONMENT = timelimit -T 30
noinst_HEADERS = argparsing.h
INCLUDES = -I$(top_srcdir)/include
outputdir = $(top_builddir)/src
qthreadlib = $(outputdir)/libqthread.la
LDADD = $(qthreadlib)
test_qt_loop_SOURCES = test_qt_loop.c
test_qt_loop_DEPENDENCIES = $(qthreadlib)
test_qt_loop_sinc_SOURCES = test_qt_loop_sinc.c
test_qt_loop_sinc_DEPENDENCIES = $(qthreadlib)
test_qt_loop_balance_SOURCES = test_qt_loop_balance.c
test_qt_loop_balance_DEPENDENCIES = $(qthreadlib)
test_qt_loop_balance_sinc_SOURCES = test_qt_loop_balance_sinc.c
test_qt_loop_balance_sinc_DEPENDENCIES = $(qthreadlib)
test_qutil_SOURCES = test_qutil.c
test_qutil_DEPENDENCIES = $(qthreadlib)
test_stackleft_SOURCES = test_stackleft.c
test_stackleft_DEPENDENCIES = $(qthreadlib)
test_basic_SOURCES = test_basic.c
test_basic_DEPENDENCIES = $(qthreadlib)
test_signal_SOURCES = test_signal.c
test_signal_DEPENDENCIES = $(qthreadlib)
test_tasklocal_SOURCES = test_tasklocal.c
test_tasklocal_DEPENDENCIES = $(qthreadlib)
test_tasklocal_no_default_SOURCES = test_tasklocal_no_default.c
test_tasklocal_no_default_DEPENDENCIES = $(qthreadlib)
test_tasklocal_no_argcopy_SOURCES = test_tasklocal_no_argcopy.c
test_tasklocal_no_argcopy_DEPENDENCIES = $(qthreadlib)
test_precond_SOURCES = test_precond.c
test_precond_DEPENDENCIES = $(qthreadlib)
test_precond_fib_SOURCES = test_precond_fib.c
test_precond_fib_DEPENDENCIES = $(qthreadlib)
test_reinit_SOURCES = test_reinit.c
test_reinit_DEPENDENCIES = $(qthreadlib)
test_qalloc_SOURCES = test_qalloc.c
test_qalloc_DEPENDENCIES = $(qthreadlib)
test_cxx_oldapi_SOURCES = test_cxx_oldapi.cpp
test_cxx_oldapi_DEPENDENCIES = $(qthreadlib)
test_cxx_1_SOURCES = test_cxx_1.cpp
test_cxx_1_DEPENDENCIES = $(qthreadlib)
test_cxx_2_SOURCES = test_cxx_2.cpp
test_cxx_2_DEPENDENCIES = $(qthreadlib)
test_qloop_utils_SOURCES = test_qloop_utils.c
test_qloop_utils_DEPENDENCIES = $(qthreadlib)
test_queue_loop_SOURCES = test_queue_loop.c
test_queue_loop_DEPENDENCIES = $(qthreadlib)
test_incr_SOURCES = test_incr.c
test_incr_DEPENDENCIES = $(qthreadlib)
test_fincr_SOURCES = test_fincr.c
test_fincr_DEPENDENCIES = $(qthreadlib)
test_dincr_SOURCES = test_dincr.c
test_dincr_DEPENDENCIES = $(qthreadlib)
test_disabled_SOURCES = test_disabled.c
test_disabled_DEPENDENCIES = $(qthreadlib)
test_cas_SOURCES = test_cas.c
test_cas_DEPENDENCIES = $(qthreadlib)
test_cacheline_SOURCES = test_cacheline.c
test_cacheline_DEPENDENCIES = $(qthreadlib)
test_id_SOURCES = test_id.c
test_id_DEPENDENCIES = $(qthreadlib)
test_allpairs_SOURCES = test_allpairs.c
test_allpairs_DEPENDENCIES = $(qthreadlib)
test_wavefront_SOURCES = test_wavefront.c
test_wavefront_DEPENDENCIES = $(qthreadlib)
test_migrate_SOURCES = test_migrate.c
test_migrate_DEPENDENCIES = $(qthreadlib)
test_qutil_qsort_SOURCES = test_qutil_qsort.c
test_qutil_qsort_DEPENDENCIES = $(qthreadlib)
test_qarray_SOURCES = test_qarray.c
test_qarray_DEPENDENCIES = $(qthreadlib)
test_qarray_accum_SOURCES = test_qarray_accum.c
test_qarray_accum_DEPENDENCIES = $(qthreadlib)
test_qlfqueue_SOURCES = test_qlfqueue.c
test_qlfqueue_DEPENDENCIES = $(qthreadlib)
test_qdqueue_SOURCES = test_qdqueue.c
test_qdqueue_DEPENDENCIES = $(qthreadlib)
test_qpool_SOURCES = test_qpool.c
test_qpool_DEPENDENCIES = $(qthreadlib)
test_feb_barrier_SOURCES = test_feb_barrier.c
test_feb_barrier_DEPENDENCIES = $(qthreadlib)
test_log_barrier_SOURCES = test_log_barrier.c
test_log_barrier_DEPENDENCIES = $(qthreadlib)
test_external_fork_SOURCES = test_external_fork.c
test_external_fork_DEPENDENCIES = $(qthreadlib)
test_external_syncvar_SOURCES = test_external_syncvar.c
test_external_syncvar_DEPENDENCIES = $(qthreadlib)
test_read_SOURCES = test_read.c
test_read_DEPENDENCIES = $(qthreadlib)
test_teams_SOURCES = test_teams.c
test_teams_DEPENDENCIES = $(qthreadlib)
test_sinc_SOURCES = test_sinc.c
test_sinc_DEPENDENCIES = $(qthreadlib)
test_sinc_null_SOURCES = test_sinc_null.c
test_sinc_null_DEPENDENCIES = $(qthreadlib)
test_multinode_init_SOURCES = test_multinode_init.c
test_multinode_init_DEPENDENCIES = $(qthreadlib)
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign test/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign test/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
test_allpairs$(EXEEXT): $(test_allpairs_OBJECTS) $(test_allpairs_DEPENDENCIES) $(EXTRA_test_allpairs_DEPENDENCIES) 
	@rm -f test_allpairs$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_allpairs_OBJECTS) $(test_allpairs_LDADD) $(LIBS)
test_basic$(EXEEXT): $(test_basic_OBJECTS) $(test_basic_DEPENDENCIES) $(EXTRA_test_basic_DEPENDENCIES) 
	@rm -f test_basic$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_basic_OBJECTS) $(test_basic_LDADD) $(LIBS)
test_basic_syncvar$(EXEEXT): $(test_basic_syncvar_OBJECTS) $(test_basic_syncvar_DEPENDENCIES) $(EXTRA_test_basic_syncvar_DEPENDENCIES) 
	@rm -f test_basic_syncvar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_basic_syncvar_OBJECTS) $(test_basic_syncvar_LDADD) $(LIBS)
test_cacheline$(EXEEXT): $(test_cacheline_OBJECTS) $(test_cacheline_DEPENDENCIES) $(EXTRA_test_cacheline_DEPENDENCIES) 
	@rm -f test_cacheline$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_cacheline_OBJECTS) $(test_cacheline_LDADD) $(LIBS)
test_cas$(EXEEXT): $(test_cas_OBJECTS) $(test_cas_DEPENDENCIES) $(EXTRA_test_cas_DEPENDENCIES) 
	@rm -f test_cas$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_cas_OBJECTS) $(test_cas_LDADD) $(LIBS)
test_cxx_1$(EXEEXT): $(test_cxx_1_OBJECTS) $(test_cxx_1_DEPENDENCIES) $(EXTRA_test_cxx_1_DEPENDENCIES) 
	@rm -f test_cxx_1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(test_cxx_1_OBJECTS) $(test_cxx_1_LDADD) $(LIBS)
test_cxx_2$(EXEEXT): $(test_cxx_2_OBJECTS) $(test_cxx_2_DEPENDENCIES) $(EXTRA_test_cxx_2_DEPENDENCIES) 
	@rm -f test_cxx_2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(test_cxx_2_OBJECTS) $(test_cxx_2_LDADD) $(LIBS)
test_cxx_oldapi$(EXEEXT): $(test_cxx_oldapi_OBJECTS) $(test_cxx_oldapi_DEPENDENCIES) $(EXTRA_test_cxx_oldapi_DEPENDENCIES) 
	@rm -f test_cxx_oldapi$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(test_cxx_oldapi_OBJECTS) $(test_cxx_oldapi_LDADD) $(LIBS)
test_dincr$(EXEEXT): $(test_dincr_OBJECTS) $(test_dincr_DEPENDENCIES) $(EXTRA_test_dincr_DEPENDENCIES) 
	@rm -f test_dincr$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_dincr_OBJECTS) $(test_dincr_LDADD) $(LIBS)
test_disabled$(EXEEXT): $(test_disabled_OBJECTS) $(test_disabled_DEPENDENCIES) $(EXTRA_test_disabled_DEPENDENCIES) 
	@rm -f test_disabled$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_disabled_OBJECTS) $(test_disabled_LDADD) $(LIBS)
test_external_fork$(EXEEXT): $(test_external_fork_OBJECTS) $(test_external_fork_DEPENDENCIES) $(EXTRA_test_external_fork_DEPENDENCIES) 
	@rm -f test_external_fork$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_external_fork_OBJECTS) $(test_external_fork_LDADD) $(LIBS)
test_external_syncvar$(EXEEXT): $(test_external_syncvar_OBJECTS) $(test_external_syncvar_DEPENDENCIES) $(EXTRA_test_external_syncvar_DEPENDENCIES) 
	@rm -f test_external_syncvar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_external_syncvar_OBJECTS) $(test_external_syncvar_LDADD) $(LIBS)
test_feb_barrier$(EXEEXT): $(test_feb_barrier_OBJECTS) $(test_feb_barrier_DEPENDENCIES) $(EXTRA_test_feb_barrier_DEPENDENCIES) 
	@rm -f test_feb_barrier$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_feb_barrier_OBJECTS) $(test_feb_barrier_LDADD) $(LIBS)
test_fincr$(EXEEXT): $(test_fincr_OBJECTS) $(test_fincr_DEPENDENCIES) $(EXTRA_test_fincr_DEPENDENCIES) 
	@rm -f test_fincr$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_fincr_OBJECTS) $(test_fincr_LDADD) $(LIBS)
test_id$(EXEEXT): $(test_id_OBJECTS) $(test_id_DEPENDENCIES) $(EXTRA_test_id_DEPENDENCIES) 
	@rm -f test_id$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_id_OBJECTS) $(test_id_LDADD) $(LIBS)
test_incr$(EXEEXT): $(test_incr_OBJECTS) $(test_incr_DEPENDENCIES) $(EXTRA_test_incr_DEPENDENCIES) 
	@rm -f test_incr$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_incr_OBJECTS) $(test_incr_LDADD) $(LIBS)
test_log_barrier$(EXEEXT): $(test_log_barrier_OBJECTS) $(test_log_barrier_DEPENDENCIES) $(EXTRA_test_log_barrier_DEPENDENCIES) 
	@rm -f test_log_barrier$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_log_barrier_OBJECTS) $(test_log_barrier_LDADD) $(LIBS)
test_migrate$(EXEEXT): $(test_migrate_OBJECTS) $(test_migrate_DEPENDENCIES) $(EXTRA_test_migrate_DEPENDENCIES) 
	@rm -f test_migrate$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_migrate_OBJECTS) $(test_migrate_LDADD) $(LIBS)
test_multinode_init$(EXEEXT): $(test_multinode_init_OBJECTS) $(test_multinode_init_DEPENDENCIES) $(EXTRA_test_multinode_init_DEPENDENCIES) 
	@rm -f test_multinode_init$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_multinode_init_OBJECTS) $(test_multinode_init_LDADD) $(LIBS)
test_precond$(EXEEXT): $(test_precond_OBJECTS) $(test_precond_DEPENDENCIES) $(EXTRA_test_precond_DEPENDENCIES) 
	@rm -f test_precond$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_precond_OBJECTS) $(test_precond_LDADD) $(LIBS)
test_precond_fib$(EXEEXT): $(test_precond_fib_OBJECTS) $(test_precond_fib_DEPENDENCIES) $(EXTRA_test_precond_fib_DEPENDENCIES) 
	@rm -f test_precond_fib$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_precond_fib_OBJECTS) $(test_precond_fib_LDADD) $(LIBS)
test_qalloc$(EXEEXT): $(test_qalloc_OBJECTS) $(test_qalloc_DEPENDENCIES) $(EXTRA_test_qalloc_DEPENDENCIES) 
	@rm -f test_qalloc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qalloc_OBJECTS) $(test_qalloc_LDADD) $(LIBS)
test_qarray$(EXEEXT): $(test_qarray_OBJECTS) $(test_qarray_DEPENDENCIES) $(EXTRA_test_qarray_DEPENDENCIES) 
	@rm -f test_qarray$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qarray_OBJECTS) $(test_qarray_LDADD) $(LIBS)
test_qarray_accum$(EXEEXT): $(test_qarray_accum_OBJECTS) $(test_qarray_accum_DEPENDENCIES) $(EXTRA_test_qarray_accum_DEPENDENCIES) 
	@rm -f test_qarray_accum$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qarray_accum_OBJECTS) $(test_qarray_accum_LDADD) $(LIBS)
test_qdqueue$(EXEEXT): $(test_qdqueue_OBJECTS) $(test_qdqueue_DEPENDENCIES) $(EXTRA_test_qdqueue_DEPENDENCIES) 
	@rm -f test_qdqueue$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qdqueue_OBJECTS) $(test_qdqueue_LDADD) $(LIBS)
test_qlfqueue$(EXEEXT): $(test_qlfqueue_OBJECTS) $(test_qlfqueue_DEPENDENCIES) $(EXTRA_test_qlfqueue_DEPENDENCIES) 
	@rm -f test_qlfqueue$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qlfqueue_OBJECTS) $(test_qlfqueue_LDADD) $(LIBS)
test_qloop_utils$(EXEEXT): $(test_qloop_utils_OBJECTS) $(test_qloop_utils_DEPENDENCIES) $(EXTRA_test_qloop_utils_DEPENDENCIES) 
	@rm -f test_qloop_utils$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qloop_utils_OBJECTS) $(test_qloop_utils_LDADD) $(LIBS)
test_qpool$(EXEEXT): $(test_qpool_OBJECTS) $(test_qpool_DEPENDENCIES) $(EXTRA_test_qpool_DEPENDENCIES) 
	@rm -f test_qpool$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qpool_OBJECTS) $(test_qpool_LDADD) $(LIBS)
test_qt_loop$(EXEEXT): $(test_qt_loop_OBJECTS) $(test_qt_loop_DEPENDENCIES) $(EXTRA_test_qt_loop_DEPENDENCIES) 
	@rm -f test_qt_loop$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qt_loop_OBJECTS) $(test_qt_loop_LDADD) $(LIBS)
test_qt_loop_balance$(EXEEXT): $(test_qt_loop_balance_OBJECTS) $(test_qt_loop_balance_DEPENDENCIES) $(EXTRA_test_qt_loop_balance_DEPENDENCIES) 
	@rm -f test_qt_loop_balance$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qt_loop_balance_OBJECTS) $(test_qt_loop_balance_LDADD) $(LIBS)
test_qt_loop_balance_sinc$(EXEEXT): $(test_qt_loop_balance_sinc_OBJECTS) $(test_qt_loop_balance_sinc_DEPENDENCIES) $(EXTRA_test_qt_loop_balance_sinc_DEPENDENCIES) 
	@rm -f test_qt_loop_balance_sinc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qt_loop_balance_sinc_OBJECTS) $(test_qt_loop_balance_sinc_LDADD) $(LIBS)
test_qt_loop_sinc$(EXEEXT): $(test_qt_loop_sinc_OBJECTS) $(test_qt_loop_sinc_DEPENDENCIES) $(EXTRA_test_qt_loop_sinc_DEPENDENCIES) 
	@rm -f test_qt_loop_sinc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qt_loop_sinc_OBJECTS) $(test_qt_loop_sinc_LDADD) $(LIBS)
test_qtimer$(EXEEXT): $(test_qtimer_OBJECTS) $(test_qtimer_DEPENDENCIES) $(EXTRA_test_qtimer_DEPENDENCIES) 
	@rm -f test_qtimer$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qtimer_OBJECTS) $(test_qtimer_LDADD) $(LIBS)
test_queue_loop$(EXEEXT): $(test_queue_loop_OBJECTS) $(test_queue_loop_DEPENDENCIES) $(EXTRA_test_queue_loop_DEPENDENCIES) 
	@rm -f test_queue_loop$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_queue_loop_OBJECTS) $(test_queue_loop_LDADD) $(LIBS)
test_qutil$(EXEEXT): $(test_qutil_OBJECTS) $(test_qutil_DEPENDENCIES) $(EXTRA_test_qutil_DEPENDENCIES) 
	@rm -f test_qutil$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qutil_OBJECTS) $(test_qutil_LDADD) $(LIBS)
test_qutil_qsort$(EXEEXT): $(test_qutil_qsort_OBJECTS) $(test_qutil_qsort_DEPENDENCIES) $(EXTRA_test_qutil_qsort_DEPENDENCIES) 
	@rm -f test_qutil_qsort$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_qutil_qsort_OBJECTS) $(test_qutil_qsort_LDADD) $(LIBS)
test_read$(EXEEXT): $(test_read_OBJECTS) $(test_read_DEPENDENCIES) $(EXTRA_test_read_DEPENDENCIES) 
	@rm -f test_read$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_read_OBJECTS) $(test_read_LDADD) $(LIBS)
test_reinit$(EXEEXT): $(test_reinit_OBJECTS) $(test_reinit_DEPENDENCIES) $(EXTRA_test_reinit_DEPENDENCIES) 
	@rm -f test_reinit$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_reinit_OBJECTS) $(test_reinit_LDADD) $(LIBS)
test_signal$(EXEEXT): $(test_signal_OBJECTS) $(test_signal_DEPENDENCIES) $(EXTRA_test_signal_DEPENDENCIES) 
	@rm -f test_signal$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_signal_OBJECTS) $(test_signal_LDADD) $(LIBS)
test_sinc$(EXEEXT): $(test_sinc_OBJECTS) $(test_sinc_DEPENDENCIES) $(EXTRA_test_sinc_DEPENDENCIES) 
	@rm -f test_sinc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_sinc_OBJECTS) $(test_sinc_LDADD) $(LIBS)
test_sinc_null$(EXEEXT): $(test_sinc_null_OBJECTS) $(test_sinc_null_DEPENDENCIES) $(EXTRA_test_sinc_null_DEPENDENCIES) 
	@rm -f test_sinc_null$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_sinc_null_OBJECTS) $(test_sinc_null_LDADD) $(LIBS)
test_stackleft$(EXEEXT): $(test_stackleft_OBJECTS) $(test_stackleft_DEPENDENCIES) $(EXTRA_test_stackleft_DEPENDENCIES) 
	@rm -f test_stackleft$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_stackleft_OBJECTS) $(test_stackleft_LDADD) $(LIBS)
test_syncvar$(EXEEXT): $(test_syncvar_OBJECTS) $(test_syncvar_DEPENDENCIES) $(EXTRA_test_syncvar_DEPENDENCIES) 
	@rm -f test_syncvar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_syncvar_OBJECTS) $(test_syncvar_LDADD) $(LIBS)
test_syncvar2$(EXEEXT): $(test_syncvar2_OBJECTS) $(test_syncvar2_DEPENDENCIES) $(EXTRA_test_syncvar2_DEPENDENCIES) 
	@rm -f test_syncvar2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_syncvar2_OBJECTS) $(test_syncvar2_LDADD) $(LIBS)
test_tasklocal$(EXEEXT): $(test_tasklocal_OBJECTS) $(test_tasklocal_DEPENDENCIES) $(EXTRA_test_tasklocal_DEPENDENCIES) 
	@rm -f test_tasklocal$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_tasklocal_OBJECTS) $(test_tasklocal_LDADD) $(LIBS)
test_tasklocal_no_argcopy$(EXEEXT): $(test_tasklocal_no_argcopy_OBJECTS) $(test_tasklocal_no_argcopy_DEPENDENCIES) $(EXTRA_test_tasklocal_no_argcopy_DEPENDENCIES) 
	@rm -f test_tasklocal_no_argcopy$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_tasklocal_no_argcopy_OBJECTS) $(test_tasklocal_no_argcopy_LDADD) $(LIBS)
test_tasklocal_no_default$(EXEEXT): $(test_tasklocal_no_default_OBJECTS) $(test_tasklocal_no_default_DEPENDENCIES) $(EXTRA_test_tasklocal_no_default_DEPENDENCIES) 
	@rm -f test_tasklocal_no_default$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_tasklocal_no_default_OBJECTS) $(test_tasklocal_no_default_LDADD) $(LIBS)
test_teams$(EXEEXT): $(test_teams_OBJECTS) $(test_teams_DEPENDENCIES) $(EXTRA_test_teams_DEPENDENCIES) 
	@rm -f test_teams$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_teams_OBJECTS) $(test_teams_LDADD) $(LIBS)
test_user_defined_block$(EXEEXT): $(test_user_defined_block_OBJECTS) $(test_user_defined_block_DEPENDENCIES) $(EXTRA_test_user_defined_block_DEPENDENCIES) 
	@rm -f test_user_defined_block$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_user_defined_block_OBJECTS) $(test_user_defined_block_LDADD) $(LIBS)
test_wavefront$(EXEEXT): $(test_wavefront_OBJECTS) $(test_wavefront_DEPENDENCIES) $(EXTRA_test_wavefront_DEPENDENCIES) 
	@rm -f test_wavefront$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_wavefront_OBJECTS) $(test_wavefront_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_allpairs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_basic.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_basic_syncvar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_cacheline.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_cas.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_cxx_1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_cxx_2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_cxx_oldapi.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_dincr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_disabled.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_external_fork.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_external_syncvar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_feb_barrier.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_fincr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_id.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_incr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_log_barrier.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_migrate.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_multinode_init.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_precond.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_precond_fib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qalloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qarray.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qarray_accum.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qdqueue.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qlfqueue.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qloop_utils.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qpool.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qt_loop.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qt_loop_balance.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qt_loop_balance_sinc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qt_loop_sinc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qtimer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_queue_loop.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qutil.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_qutil_qsort.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_read.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_reinit.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_signal.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_sinc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_sinc_null.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_stackleft.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_syncvar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_syncvar2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_tasklocal.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_tasklocal_no_argcopy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_tasklocal_no_default.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_teams.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_user_defined_block.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_wavefront.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<

.cpp.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-recursive
all-am: Makefile $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am:

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) check-am \
	ctags-recursive install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool ctags \
	ctags-recursive distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am


buildtests: $(TESTS)
buildall: $(TESTS) $(benchmarks)
	$(MAKE) -C benchmarks buildall
buildextra: $(benchmarks)
	$(MAKE) -C benchmarks buildextra

.PHONY: buildall buildtests buildextra

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
