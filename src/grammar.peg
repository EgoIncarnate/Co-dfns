# PEG grammar for Co-Dfns language
# This grammar handles the process of tokenization as well as that of 
# parsing. It is designed to take into account the inherent 
# ambiguities in the APL language.

Start <- <OWS Statements OWS> !. { printf("%s\n", yytext); }

Statements <- CondStmt (Separator CondStmt)*

CondStmt <- (Value OWS ":" OWS)? Value

Separator <- OWS "⋄" OWS

Value <-
	Application
	/ Assignment
	/ SingleValue

SingleValue <-
	Array
	/ Variable
	/ "(" Value ")"
		
Assignment <-
	VariableList OWS "←" OWS Value
	/ Variable OWS "←" OWS Function

Application <-
	MonadicApp
	/ DyadicApp

MonadicApp <- Function OWS Value

DyadicApp <- SingleValue OWS Function OWS Value

Function <-
	Primitive
	/ "{" OWS Statements OWS "}"
	/ "{}"

Primitive <- 
	"-" / "+" / "¯" / "<" / "≤" / "=" / "≥" / ">" / "≠" 
	/ "∨" / "∧" / "×" / "÷" / "?" / "∊" / "⍴" / "~" / "↑" 
	/ "↓" / "⍳" / "○" / "*" / "⌈" / "⌊" / "∇" / "⍎" / "⍕" 
	/ "⊢" / "⊂" / "⊃" / "∩" / "∪" / "⊥" / "⊤" / "|" / "⍀" 
	/ "⌿" / "⍒" / "⍋" / "⌽" / "⍉" / "⊖" / "⍟" / "⍱" / "⍲" 
	/ "!" / "⌹" / "⍷" / "⍸" / "⌷" / "≡" / "≢" / "⍪" / "/" 
	/ "," / "\\"

VariableList <- Variable (WS Variable)*

Variable <- "⍺" / "⍵" / [a-zA-Z_] [a-zA-Z0-9_]*

Array <-
	"⍬"
	/ MixedArray
	/ NumberArray
	/ CharArray

MixedArray <-
	(Number WS)+ CharArray (WS (Number / CharArray))*
	/ (CharArray WS)+ Number (WS (Number / CharArray))*

CharArray <- 
	Character
	/ "''" 
	/ "'" ("''" / [^'])+ "'"

NumberArray <- Number (WS Number)*

Character <- "'" [^'] "'" 

Number <- Float / Integer

Integer <- '¯'? [0-9]+ 

Float <- '¯'? [0-9]+ '.' [0-9]+

OWS <- WS ?

WS <- (" " / "\t" / "\n" / "\r")+
