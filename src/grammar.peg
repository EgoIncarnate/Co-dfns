# PEG grammar for Co-Dfns language
# This grammar handles the process of tokenization as well as that of 
# parsing. It is designed to take into account the inherent 
# ambiguities in the APL language.

Start <- <OWSNL Statements OWSNL>  { printf("%s\n", yytext); }

Statements <- CondStmt (Separator CondStmt)*

CondStmt <- (Value OWS ":" OWS)? Value

Separator <-  (OWS) "\n" OWSNL / OWS "⋄" OWS

Value <- Application / Assignment / SingleValue

SingleValue <-
	Array
	/ Variable OWS Index ?
	/ "(" OWS Value OWS ")" OWS Index ?

Index <- ("[]" / "[" OWS Value (OWS ";" OWS Value)* OWS "]")+
		
Assignment <-
	Variable OWS "←" OWS Function & Separator
	/ VariableList OWS "←" OWS Value

Function <- Operator / BaseFun

BaseFun <- MonPrim / DyaPrim / GenFunc

Application <- 
	MonPrim OWS Value 
	/ SingleValue OWS DyaPrim OWS Value
	/ SingleValue OWS (Operator / GenFunc) OWS Value
	/ (Operator / GenFunc) OWS Value

GenFunc <- "{" OWSNL Statements OWSNL "}" / "{}"

Operator <- 
	BaseFun OWS Operator OWS Function
	/ BaseFun OWS Operator 
	/ "∘" OWS "." Function  
	/ BaseFun OWS DyaPrimOp OWS Function
	/ BaseFun OWS MonPrimOp
	/ SingleValue OWS "∘" OWS Function
	/ BaseFun OWS ("∘" / "⍣") OWS SingleValue

MonPrimOp <- "⍨" / "¨" / "/" / "⌿" / "\\" / "⍀" 

DyaPrimOp <- "∘" / "⍣" / "." 

MonPrim <- 
	"-" / "+" / "×" / "÷" / "?" / "∊" / "⍴" / "~" / "↑" 
	/ "↓" / "⍳" / "○" / "*" / "⌈" / "⌊" / "∇" / "⍎" / "⍕" 
	/ "⊣" / "⊢" / "⊂" / "⊃" / "∪" / "|" / "!" / "⌹" / "≡"
	/ "⍒" / "⍋" / "⌽" / "⍉" / "⊖" / "⍟" / "⍪" / ","

DyaPrim <-
	"-" / "+" / "<" / "≤" / "=" / "≥" / ">" / "≠" 
	/ "∨" / "∧" / "×" / "÷" / "?" / "∊" / "⍴" / "~" / "↑" 
	/ "↓" / "⍳" / "○" / "*" / "⌈" / "⌊" / "∇" / "⍎" / "⍕" 
	/ "⊢" / "⊂" / "⊃" / "∩" / "∪" / "⊥" / "⊤" / "|" / "⍀" 
	/ "⌿" / "⍒" / "⍋" / "⌽" / "⍉" / "⊖" / "⍟" / "⍱" / "⍲" 
	/ "!" / "⌹" / "⍷" / "⍸" / "⌷" / "≡" / "≢" / "⍪" / "/" 
	/ "," / "\\" / "⊣"


VariableList <- Variable (WS Variable)*

Variable <- "⍺" / "⍵" / [a-zA-Z_] [a-zA-Z0-9_]*

Array <-
	"⍬"
	/ MixedArray
	/ NumberArray
	/ CharArray

MixedArray <-
	(Number WS)+ CharArray (WS (Number / CharArray))*
	/ (CharArray WS)+ Number (WS (Number / CharArray))*

CharArray <- 
	Character
	/ "''" 
	/ "'" ("''" / [^'])+ "'"

NumberArray <- Number (WS Number)*

Character <- "'" [^'] "'" 

Number <- Float / Integer

Integer <- '¯'? [0-9]+ 

Float <- '¯'? [0-9]+ '.' [0-9]+

OWS <- WS ?
OWSNL <- WSNL ?

WS <- (" " / "\t" )+
WSNL <- (" " / "\t" / "\r" / "\n")+